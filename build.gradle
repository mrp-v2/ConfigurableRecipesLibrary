buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'maven-publish'
def mcVersion = '1.16.2'
def majorForgeVersion = '33'
def forgeVersion = "${majorForgeVersion}.0.20"
version = "${mcVersion}-1.0.0.0"
def author = 'mrp_v2'
def modId = 'configurablerecipeslibrary'
archivesBaseName = modId
group = "${author}.${archivesBaseName}"

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'snapshot', version: '20200723-1.16.1'
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            mods {
                configurablerecipeslibrary {
                    source sourceSets.main
                }
            }
        }
        testClient {
            parent runs.client
            mods {
                configurablerecipeslibrary {
                    sources sourceSets.main, sourceSets.test
                }
            }
        }
        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            mods {
                configurablerecipeslibrary {
                    source sourceSets.main
                }
            }
        }
        testServer {
            parent runs.server
            mods {
                configurablerecipeslibrary {
                    sources sourceSets.main, sourceSets.test
                }
            }
        }
        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            args '--mod', modId, '--all', '--output', file('src/generated/resources/')
            mods {
                configurablerecipeslibrary {
                    source sourceSets.main
                }
            }
        }
        testData {
            parent runs.data
            mods {
                configurablerecipeslibrary {
                    sources sourceSets.main, sourceSets.test
                }
            }
        }
    }
}

task devJar(type: Jar) {
    classifier = 'dev'
    from sourceSets.main.output
}

dependencies {
    minecraft "net.minecraftforge:forge:${mcVersion}-${forgeVersion}"
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : archivesBaseName,
                "Specification-Vendor"    : author,
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : author,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

processResources {
    inputs.property 'version', project.version
    inputs.property 'modId', modId
    inputs.property 'majorForgeVersion', majorForgeVersion
    inputs.property 'mcVersion', mcVersion
    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'
        expand 'version': project.version, 'modId': modId, 'majorForgeVersion': majorForgeVersion, 'mcVersion': mcVersion
    }
    from(sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml'
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact devJar
        }
    }
}