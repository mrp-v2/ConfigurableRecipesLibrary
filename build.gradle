import com.google.gson.GsonBuilder
import com.google.gson.JsonElement
import com.google.gson.JsonObject
import com.google.gson.JsonParser
import groovy.json.JsonSlurper

buildscript {
    repositories {
        maven {
            url = 'https://files.minecraftforge.net/maven'
        }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'maven-publish'
String tag = System.getenv('GITHUB_REF')
if (tag != null)
{
    String[] path = tag.split('/')
    tag = path[path.length - 1]
    println 'Found git tag ' + tag
    version = tag
} else {
    tag = version
}
String mcVersion = version.split('-')[0]
if (forgeVersion == 'latest' || forgeVersion == 'recommended')
{
    println 'Grabbing ' + forgeVersion + ' forge version for MC ' + mcVersion
    forgeVersion = new JsonSlurper().
            parse(new URL('https://files.minecraftforge.net/maven/net/minecraftforge/forge/promotions_slim.json')).
            get('promos').get(mcVersion + '-' + forgeVersion)
    assert forgeVersion != null
}
String capitalizedModId = modDisplayName.replace(' ', '')
String modId = capitalizedModId.toLowerCase()
String forgeMajor = forgeVersion.split('\\.')[0]
String mcNextVersion = '1.' + ((mcVersion.split('\\.')[1] as int) + 1)
String homepageURL = "https://www.curseforge.com/minecraft/mc-mods/${modDisplayName.replace(' ', '-').toLowerCase()}"
String issuesURL = "${homepageURL}/issues"
String updateURL = "https://raw.githubusercontent.com/mrp-v2/${capitalizedModId}/master/update.json"
archivesBaseName = modId
group = "${author}.${archivesBaseName}"

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' +
        System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
println('Minecraft: ' + mcVersion + ' Forge: ' + forgeVersion + ' Mapping: ' + mapping + ' Mod: ' + version)

minecraft {
    mappings channel: mapping.split('\\|')[0], version: mapping.split('\\|')[1]
    accessTransformer = file 'src/main/resources/META-INF/accesstransformer.cfg'
}

dependencies {
    minecraft "net.minecraftforge:forge:${mcVersion}-${forgeVersion}"
}

jar {
    manifest {
        attributes(['Specification-Title'     : archivesBaseName,
                    'Specification-Vendor'    : author,
                    'Specification-Version'   : '1', // We are version 1 of ourselves
                    'Implementation-Title'    : project.name,
                    'Implementation-Version'  : "${version}",
                    'Implementation-Vendor'   : author,
                    'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")])
    }
}

jar.finalizedBy('reobfJar')

processResources {
    inputs.property 'version', project.version
    inputs.property 'modId', modId
    inputs.property 'forgeMajor', forgeMajor
    inputs.property 'mcVersion', mcVersion
    inputs.property 'mcNextVersion', mcNextVersion
    inputs.property 'homepageURL', homepageURL
    inputs.property 'modDisplayName', modDisplayName
    inputs.property 'capitalizedModId', capitalizedModId
    inputs.property 'modDescription', modDescription
    inputs.property 'author', author
    inputs.property 'updateURL', updateURL
    inputs.property 'issuesURL', issuesURL
    from(sourceSets.main.resources.srcDirs) {
        include '**/*'
        exclude '**/*.png'
        expand 'version': project.version, 'modId': modId, 'forgeMajor': forgeMajor, 'mcVersion': mcVersion,
                'mcNextVersion': mcNextVersion, 'homepageURL': homepageURL, 'modDisplayName': modDisplayName,
                'capitalizedModId': capitalizedModId, 'modDescription': modDescription, 'author': author,
                'updateURL': updateURL, 'issuesURL': issuesURL
    }
    from(sourceSets.main.resources.srcDirs) {
        exclude '**/*'
    }
}

publishing {
    repositories {
        maven {
            name = 'GitHubPackages'
            url = uri('https://maven.pkg.github.com/mrp-v2/' + capitalizedModId)
            credentials {
                username = 'mrp-v2'
                password = System.getenv('GITHUB_TOKEN')
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            artifactId modId
            artifact jar
        }
    }
}

task regenerateUpdateJson {
    doLast {
        String updateJsonLocation = './update.json'
        println 'Regenerating update.json from tag: ' + tag
        JsonObject updateJson = new JsonObject()
        updateJson.addProperty('homepage', homepageURL)
        JsonObject promos = new JsonObject()
        updateJson.add('promos', promos)
        JsonObject oldUpdateJson = new JsonParser().
                parse(new File(updateJsonLocation).text).getAsJsonObject().
                getAsJsonObject('promos')
        for (Map.Entry<String, JsonElement> entry : oldUpdateJson.entrySet())
        {
            if (entry.key.contains(mcVersion) || !entry.key.contains('-'))
            {
                promos.addProperty(entry.key, tag)
                continue
            }
            promos.addProperty(entry.key, entry.value.asString)
        }
        String jsonString = new GsonBuilder().setPrettyPrinting().create().toJson(updateJson)
        new File(updateJsonLocation).text = jsonString
        println 'git status --verbose'.execute().text.trim()
        println 'git remote --verbose'.execute().text.trim()
        println 'git branch --verbose'.execute().text.trim()
        println 'git switch --track'.execute().text.trim()
        println 'git config user.name github-actions'.execute().text.trim()
        println 'git config user.email github-actions@github.com'.execute().text.trim()
        println 'git add .'.execute().text.trim()
        println 'git commit -m "regenerated update.json"'.execute().text.trim()
        println 'git push'.execute().text.trim()
    }
}